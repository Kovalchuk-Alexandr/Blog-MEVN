{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6c8fe47e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"items\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = /*#__PURE__*/_createStaticVNode(\"<p data-v-6c8fe47e> Данные действительно окружают нас во всех сферах жизни. Все это привело к повышенной востребованности специалистов SQL. Но самое интересное в этом всем то, что у профессионалов – гибкий график, чаще всего удаленная работа, отличные условия труда и, конечно, высокий уровень заработной платы. В интернете можно найти много информации о завышенных требованиях к специалистам и высокой зарплате. Так ли это? </p><br data-v-6c8fe47e><h2 data-v-6c8fe47e>Немного о профессии <span style=\\\"color:red;\\\" data-v-6c8fe47e>SQL</span></h2><p data-v-6c8fe47e> SQL – <span style=\\\"text-decoration:underline;\\\" data-v-6c8fe47e> Structured Query Language</span> – это язык программирования, с помощью которого производится управление базами данных. Разработчик SQL отвечает за разработку, настройку и поддержку этих баз данных. Он же занимается созданием различных продуктов, направленных на оптимизацию и повышение производительности баз данных. Программистам также требуется взаимодействовать с написанием и отладкой исходного кода. Для начала работы в этой сфере необходимо хотя бы общее образование в сфере компьютерных технологий. За границей требуется степень степень бакалавра или магистра. Кроме того, нужно логическое мышление, стрессоустойчивость и способность решать любые проблемы здесь и сейчас. </p><img src=\\\"https://itproger.com/img/news/1683961960.png\\\" alt=\\\"\\\" data-v-6c8fe47e><p data-v-6c8fe47e> Требований не так уж и много, но и они, и заработная плата будут очень зависеть от уровня специалиста. Junior, middle и senior конечно будут получать совершенно разные суммы, ведь у них разный уровень опыта, квалификации и ответственности. </p><br data-v-6c8fe47e><h2 data-v-6c8fe47e>Junior SQL</h2><p data-v-6c8fe47e> Начинающим специалистам всегда сложно, вне зависимости от сферы деятельности. Основное, что требуется от джунов – постоянное обучение и выполнение рутинных задач. Чаще всего к данной категории относятся студенты и лица, которые имеют опыт работы в сфере до 2-х лет. Для джунов всегда много работы, т.к. им нужна практика. Чаще всего этот путь непростой, но самое главное, что он открывает путь в профессию. Лучше всего, если такой юный работник мотивирован, но чаще всего это не так. Согласно сайту Ziprecruiter зарплата начинающих специалистов SQL примерно от 40 000 до 60 000 долларов США в год. Но да, это без вычета налогов, а они могут достигать и 40% от этой суммы. </p><h2 data-v-6c8fe47e>Middle SQL</h2><p data-v-6c8fe47e> Мидлы это уже новый уровень. Работа у них более ответственная, а нагрузка высокая. Но здесь главное не учиться, а показывать свои знания. Чтобы работать мидлом требуется от 2 до 6 лет опыта работы в SQL. И хотя учиться тоже нужно, на работника уже сваливают самостоятельную разработку, оптимизацию и поддержку баз данных, а также создание сложных SQL-запросов, оптимизацию производительности и участие в архитектурных решениях. </p><img src=\\\"https://itproger.com/img/news/1683961962.jpg\\\" alt=\\\"\\\" data-v-6c8fe47e><p data-v-6c8fe47e> Но условия, требования, обязанности и заработная плата очень колеблются в зависимости от компании и страны, в которой она находится. Так, если опыт middle-SQL значителен – з/п будет расти. По данным сайта Glassdoor специалистам этого уровня готовы платить от 60 000 до 90 000 долларов США в год. </p>\", 13);\nconst _hoisted_16 = {\n  class: \"comments\"\n};\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Leave some comments\", -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_19 = {\n  for: \"msg\"\n};\nconst _hoisted_20 = {\n  key: 0,\n  id: \"articles\"\n};\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = {\n  key: 1,\n  class: \"empty\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_center = _resolveComponent(\"center\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, \"ID: \" + _toDisplayString($props.id), 1 /* TEXT */), _createElementVNode(\"main\", _hoisted_1, [_createCommentVNode(\" ---------- Блок статьи ------------ -\"), _createCommentVNode(\" <div class=\\\"item\\\" v-for=\\\"el in items\\\" :key=\\\"el.id\\\"> \"), _createElementVNode(\"div\", null, [_createElementVNode(\"img\", {\n    src: this.items.img,\n    alt: \"\"\n  }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"h4\", null, _toDisplayString(this.items.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(this.items.anons), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(this.items.full_text), 1 /* TEXT */), _createCommentVNode(\" ----------  Блок полной статьи --------- \"), _hoisted_3, _createElementVNode(\"p\", null, _toDisplayString(this.items.published), 1 /* TEXT */), _createCommentVNode(\" <button type=\\\"button\\\" class=\\\"btnDetails\\\">Details</button> \")])]), _createElementVNode(\"section\", _hoisted_16, [_createElementVNode(\"div\", null, [_hoisted_17, _createCommentVNode(\" <form @submit.prevent=\\\"createPost\\\" :class=\\\"{ error: maxCharacters > 20 }\\\"> \"), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.addMsg && $options.addMsg(...args), [\"prevent\"])),\n    class: _normalizeClass({\n      error: $options.maxCharacters > 100\n    })\n  }, [_createCommentVNode(\" <form> \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    placeholder: \"Enter You Name\",\n    id: \"user\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.userInput]]), _hoisted_18, _createElementVNode(\"label\", _hoisted_19, [_createTextVNode(\"Max text: \"), _createElementVNode(\"span\", null, _toDisplayString($options.maxCharacters) + \" / 100\", 1 /* TEXT */)]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.msgInput = $event),\n    placeholder: \"Enter some message\",\n    id: \"msg\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.msgInput]]), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btnAdd\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.addMsg && $options.addMsg(...args))\n  }, _toDisplayString($data.msgBtnAdd), 1 /* TEXT */)], 34 /* CLASS, HYDRATE_EVENTS */)]), $data.comments.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createCommentVNode(\" Перебираем массив, получаем эл-т, индекс и выводим каждый элемент \"), _createElementVNode(\"h2\", null, [_createTextVNode(\" Comments ( \"), _createElementVNode(\"span\", null, _toDisplayString($data.comments.length), 1 /* TEXT */), _createTextVNode(\" ) \")]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, el => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"list-item\",\n      key: el.id\n    }, [_createElementVNode(\"button\", {\n      onClick: $event => $options.deletePost(el)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_21), _createCommentVNode(\" <p>\\n          {{ el.message }} <span>{{ el.user }}</span>\\n        </p> \"), _createElementVNode(\"h4\", null, _toDisplayString(el.user), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(el.message), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"h2\", _hoisted_22, [_createVNode(_component_center, null, {\n    default: _withCtx(() => [_createTextVNode(\"There is no any articles!\")]),\n    _: 1 /* STABLE */\n  })]))])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","for","id","_toDisplayString","$props","_hoisted_1","_createCommentVNode","src","items","img","alt","title","anons","full_text","_hoisted_3","published","_hoisted_16","_hoisted_17","onSubmit","_cache","_withModifiers","args","$options","addMsg","_normalizeClass","error","maxCharacters","type","$data","userInput","$event","placeholder","_hoisted_18","_hoisted_19","msgInput","onClick","msgBtnAdd","comments","length","_createElementBlock","_hoisted_20","_Fragment","_renderList","el","key","deletePost","_hoisted_21","user","message","_hoisted_22","_createVNode","_component_center"],"sources":["D:\\JS\\JSProjects\\Node JS\\nodejs\\blog\\public\\src\\components\\Item1.vue"],"sourcesContent":["<template>\n  <div>ID: {{ id }}</div>\n  <main class=\"items\">\n    <!-- ---------- Блок статьи ------------ --->\n    <!-- <div class=\"item\" v-for=\"el in items\" :key=\"el.id\"> -->\n    <div>\n      <img v-bind:src=\"this.items.img\" alt=\"\" />\n      <h4>{{ this.items.title }}</h4>\n      <p>{{ this.items.anons }}</p>\n      <p>{{ this.items.full_text }}</p>\n      <!-- ----------  Блок полной статьи --------- -->\n      <p>\n        Данные действительно окружают нас во всех сферах жизни. Все это привело\n        к повышенной востребованности специалистов SQL. Но самое интересное в\n        этом всем то, что у профессионалов – гибкий график, чаще всего удаленная\n        работа, отличные условия труда и, конечно, высокий уровень заработной\n        платы. В интернете можно найти много информации о завышенных требованиях\n        к специалистам и высокой зарплате. Так ли это?\n      </p>\n      <br />\n      <h2>Немного о профессии <span style=\"color: red\">SQL</span></h2>\n      <p>\n        SQL –\n        <span style=\"text-decoration: underline\">\n          Structured Query Language</span\n        >\n        – это язык программирования, с помощью которого производится управление\n        базами данных. Разработчик SQL отвечает за разработку, настройку и\n        поддержку этих баз данных. Он же занимается созданием различных\n        продуктов, направленных на оптимизацию и повышение производительности\n        баз данных. Программистам также требуется взаимодействовать с написанием\n        и отладкой исходного кода. Для начала работы в этой сфере необходимо\n        хотя бы общее образование в сфере компьютерных технологий. За границей\n        требуется степень степень бакалавра или магистра. Кроме того, нужно\n        логическое мышление, стрессоустойчивость и способность решать любые\n        проблемы здесь и сейчас.\n      </p>\n      <img src=\"https://itproger.com/img/news/1683961960.png\" alt=\"\" />\n\n      <p>\n        Требований не так уж и много, но и они, и заработная плата будут очень\n        зависеть от уровня специалиста. Junior, middle и senior конечно будут\n        получать совершенно разные суммы, ведь у них разный уровень опыта,\n        квалификации и ответственности.\n      </p>\n      <br />\n      <h2>Junior SQL</h2>\n      <p>\n        Начинающим специалистам всегда сложно, вне зависимости от сферы\n        деятельности. Основное, что требуется от джунов – постоянное обучение и\n        выполнение рутинных задач. Чаще всего к данной категории относятся\n        студенты и лица, которые имеют опыт работы в сфере до 2-х лет. Для\n        джунов всегда много работы, т.к. им нужна практика. Чаще всего этот путь\n        непростой, но самое главное, что он открывает путь в профессию. Лучше\n        всего, если такой юный работник мотивирован, но чаще всего это не так.\n        Согласно сайту Ziprecruiter зарплата начинающих специалистов SQL\n        примерно от 40 000 до 60 000 долларов США в год. Но да, это без вычета\n        налогов, а они могут достигать и 40% от этой суммы.\n      </p>\n      <h2>Middle SQL</h2>\n      <p>\n        Мидлы это уже новый уровень. Работа у них более ответственная, а\n        нагрузка высокая. Но здесь главное не учиться, а показывать свои знания.\n        Чтобы работать мидлом требуется от 2 до 6 лет опыта работы в SQL. И хотя\n        учиться тоже нужно, на работника уже сваливают самостоятельную\n        разработку, оптимизацию и поддержку баз данных, а также создание сложных\n        SQL-запросов, оптимизацию производительности и участие в архитектурных\n        решениях.\n      </p>\n      <img src=\"https://itproger.com/img/news/1683961962.jpg\" alt=\"\" />\n      <p>\n        Но условия, требования, обязанности и заработная плата очень колеблются\n        в зависимости от компании и страны, в которой она находится. Так, если\n        опыт middle-SQL значителен – з/п будет расти. По данным сайта Glassdoor\n        специалистам этого уровня готовы платить от 60 000 до 90 000 долларов\n        США в год.\n      </p>\n\n      <p>{{ this.items.published }}</p>\n      <!-- <button type=\"button\" class=\"btnDetails\">Details</button> -->\n    </div>\n  </main>\n  <section class=\"comments\">\n    <div>\n      <h2>Leave some comments</h2>\n      <!-- <form @submit.prevent=\"createPost\" :class=\"{ error: maxCharacters > 20 }\"> -->\n      <form @submit.prevent=\"addMsg\" :class=\"{ error: maxCharacters > 100 }\">\n        <!-- <form> -->\n        <input\n          type=\"text\"\n          v-model=\"userInput\"\n          placeholder=\"Enter You Name\"\n          id=\"user\"\n        /><br />\n        <label for=\"msg\"\n          >Max text: <span>{{ maxCharacters }} / 100</span></label\n        >\n        <textarea\n          v-model=\"msgInput\"\n          placeholder=\"Enter some message\"\n          id=\"msg\"\n        />\n        <button type=\"button\" class=\"btnAdd\" @click=\"addMsg\">\n          {{ msgBtnAdd }}\n        </button>\n      </form>\n    </div>\n\n    <div v-if=\"comments.length > 0\" id=\"articles\">\n      <!-- Перебираем массив, получаем эл-т, индекс и выводим каждый элемент -->\n      <h2>\n        Comments ( <span>{{ comments.length }}</span> )\n      </h2>\n      <div class=\"list-item\" v-for=\"el in comments\" :key=\"el.id\">\n        <button @click=\"deletePost(el)\">Delete</button>\n        <!-- <p>\n          {{ el.message }} <span>{{ el.user }}</span>\n        </p> -->\n        <h4>{{ el.user }}</h4>\n        <p>{{ el.message }}</p>\n      </div>\n    </div>\n    <h2 v-else class=\"empty\">\n      <center>There is no any articles!</center>\n    </h2>\n  </section>\n</template>\n\n<!-- ---------- vue - приложение -------------- -->\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      items: [],\n      comments: [],\n      comm: [],\n      userInput: \"\",\n      msgInput: \"\",\n      msgBtnAdd: \"Add Item\",\n    };\n  },\n\n  // Во vue.config.js сказали, что вместо 'api/'\n  // подставляем 'http://localhost:3000'\n  // переходим на главную страницу нашего api-приложения\n  async mounted() {\n    const result = await axios.get(\"/api/blog-item/\" + this.id);\n    this.items = result.data;\n\n    const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    this.comments = res.data;\n    console.log(this.id);\n    console.log(this.items);\n    console.log(this.comments);\n  },\n  methods: {\n    // async updateComments() {\n    //   const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    //   this.comments = res.data;\n    // },\n    // Удаление записей\n    async deletePost(el) {\n      await axios.delete(\"/api/blog-item/msg/\" + el._id);\n      // обращаемся к массиву и обрезаем, начиная с индекса 'i' - один элемент\n      // this.comments.splice(i, 1);\n      // console.log(`element: ${el}, id: ${i}`);\n      this.comments = this.comments.filter((item) => item._id != el._id);\n      console.log(el);\n      console.log(el._id);\n      console.log(this.comm);\n    },\n    // Добавление записей\n    async addMsg() {\n      //let date = Date.now();\n      let url = `/api/blog-item/msg/?user=${this.userInput}&message=${this.msgInput}&item_id=${this.id}`;\n      if (this.userInput !== \"\" && this.msgInput !== \"\") {\n        await axios.post(url);\n        // updateComments();\n        this.comments.push({\n          item_id: this.id,\n          user: this.userInput,\n          message: this.msgInput,\n        });\n        console.log(this.comments);\n        // после ввода, очищаем поля\n        this.userInput = \"\";\n        this.msgInput = \"\";\n      }\n      this.msgBtnAdd = \"Add Item\";\n    },\n  },\n  props: [\"id\"],\n  computed: {\n    // max число введенных символов - 20\n    maxCharacters() {\n      return this.msgInput.length;\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* ---------------- Main ---------------- */\nmain,\n.comments {\n  width: 90%;\n  padding: 20px 5%;\n  margin-bottom: 40px;\n  line-height: 22px;\n  /* display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  transition: width 700ms ease-in-out; */\n}\n/* main .item {\n  width: 380px;\n  background: #f1d1a1;\n  padding: 20px;\n  margin-bottom: 50px;\n  position: relative;\n}\n\nmain .item img {\n  transition: transform 500ms ease;\n}\n\nmain .item:hover img {\n  transform: scale(1.05);\n  cursor: pointer;\n} */\n\nmain h4 {\n  font-weight: 600;\n  font-size: 23px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  text-align: center;\n  color: #c20909;\n}\n\nmain p {\n  margin-top: 10px;\n  margin-bottom: 5px;\n  /* color: #c20909; */\n}\n\n.item button {\n  width: 60%;\n  margin-left: 20%;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  text-align: center;\n  font-size: 16px;\n  /* Выравниваем по центру (по вертикали), указываем line-height = height*/\n  /* line-height: 70px; */\n  /* background: #e79e6d; */\n  background: #a52323;\n  border: 2px solid coral;\n  color: cornsilk;\n  cursor: pointer;\n  transition: all 500ms ease;\n}\n\n.item button:hover {\n  cursor: pointer;\n  background: #cc1f1f;\n  /* background: #e43f3f; */\n}\n\n/* ---------------- Forms ---------------- */\n.list-item {\n  width: 100%;\n  background: #f1d1a1; /*aquamarine; #fcddaf; #dfbc4c*/\n  padding: 10px 15px;\n  margin-top: 10px;\n  border: 1px solid silver;\n  border-radius: 5px;\n  font-size: 14px;\n}\n\n.list-item p {\n  margin-bottom: 8px;\n}\n\n.list-item p span {\n  float: right;\n  font-size: 12px;\n  color: #8f772d;\n}\n\n.list-item p:last-child {\n  color: #b1953c;\n  font-size: 11px;\n}\n\n.list-item button {\n  /* display: block; */\n  float: right;\n  border: 0;\n  border-radius: 5px;\n  padding: 4px 8px;\n  margin: 0;\n  margin-left: 10px;\n  background: #d15a2a;\n  color: #fddaae;\n  cursor: pointer;\n  font-size: 12px;\n  transition: transform 300ms ease;\n}\n\n/* ---------- Блок формы ------------------ */\nform input,\nform textarea {\n  width: 100%;\n  background: bisque;\n  border-radius: 5px;\n  border: 2px solid burlywood;\n  padding: 8px 10px;\n  font-size: 14px;\n  outline: none;\n  margin-bottom: 20px;\n  margin-top: 3px;\n  resize: none;\n}\n\nform textarea {\n  height: 90px;\n}\n\nform label {\n  font-weight: bold;\n}\n\nform.error label {\n  color: #cf341ff1;\n}\n\nform button {\n  /* float: right; */\n  display: block;\n  /* width: 70px; */\n  background: #d15a2a; /*#f05a23;*/\n  border: 2px solid burlywood;\n  border-radius: 8px;\n  border-bottom-width: 4px;\n  padding: 10px 12px;\n  font-size: 13px;\n  font-weight: bold;\n  color: blanchedalmond;\n  cursor: pointer;\n  transition: all 100ms ease;\n}\n\nform button:hover {\n  margin-top: 2px;\n  border-bottom-width: 2px;\n  background: #f86f3e;\n}\n.btnEdit {\n  background: #348531;\n}\n\n/* ---------- Блок статей ------------------ */\n#articles {\n  margin: 20px;\n}\n\n#articles .post {\n  background: bisque;\n  padding: 20px;\n  margin-bottom: 20px;\n  border: 1px solid burlywood;\n  float: left;\n  width: 100%;\n}\n\n#articles .post button {\n  float: right;\n  background: #f05a23;\n  border: 2px solid burlywood;\n  border-radius: 8px;\n  border-bottom-width: 4px;\n  padding: 10px 12px;\n  font-size: 13px;\n  font-weight: bold;\n  color: blanchedalmond;\n  cursor: pointer;\n  transition: all 100ms ease;\n}\n\n#articles .post button:hover {\n  margin-top: 2px;\n  border-bottom-width: 2px;\n  background: #f86f3e;\n}\n\n.empty {\n  margin: 20px;\n  color: #e60101;\n}\n/* .list-item button:hover {\n  transform: scale(1.1);\n} */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
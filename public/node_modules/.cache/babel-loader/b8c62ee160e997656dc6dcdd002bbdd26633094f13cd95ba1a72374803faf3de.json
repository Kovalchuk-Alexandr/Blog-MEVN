{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      items: [],\n      comments: [],\n      comm: [],\n      userInput: \"\",\n      msgInput: \"\",\n      msgBtnAdd: \"Add Item\"\n    };\n  },\n  // Во vue.config.js сказали, что вместо 'api/'\n  // подставляем 'http://localhost:3000'\n  // переходим на главную страницу нашего api-приложения\n  async mounted() {\n    const result = await axios.get(\"/api/blog-item/\" + this.id);\n    this.items = result.data;\n    const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    this.comments = res.data;\n    console.log(this.id);\n    console.log(this.items);\n    console.log(this.comments);\n  },\n  methods: {\n    // async updateComments() {\n    //   const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    //   this.comments = res.data;\n    // },\n    // Удаление записей\n    async deletePost(el) {\n      await axios.delete(\"/api/blog-item/msg/\" + el._id);\n      // обращаемся к массиву и обрезаем, начиная с индекса 'i' - один элемент\n      // this.comments.splice(i, 1);\n      // console.log(`element: ${el}, id: ${i}`);\n      this.comments = this.comments.filter(item => item._id != el._id);\n      console.log(el);\n      console.log(el._id);\n      console.log(this.comm);\n    },\n    // Добавление записей\n    async addMsg() {\n      //let date = Date.now();\n      let url = `/api/blog-item/msg/?user=${this.userInput}&message=${this.msgInput}&item_id=${this.id}`;\n      if (this.userInput !== \"\" && this.msgInput !== \"\") {\n        await axios.post(url);\n        // updateComments();\n        this.comments.push({\n          item_id: this.id,\n          user: this.userInput,\n          message: this.msgInput\n        });\n        console.log(this.comments);\n        // после ввода, очищаем поля\n        this.userInput = \"\";\n        this.msgInput = \"\";\n      }\n      this.msgBtnAdd = \"Add Item\";\n    }\n  },\n  props: [\"id\"],\n  computed: {\n    // max число введенных символов - 20\n    maxCharacters() {\n      return this.msgInput.length;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","items","comments","comm","userInput","msgInput","msgBtnAdd","mounted","result","get","id","res","console","log","methods","deletePost","el","delete","_id","filter","item","addMsg","url","post","push","item_id","user","message","props","computed","maxCharacters","length"],"sources":["D:\\JS\\JSProjects\\Node JS\\nodejs\\blog\\public\\src\\components\\Item1.vue"],"sourcesContent":["<template>\n  <div>ID: {{ id }}</div>\n  <main class=\"items\">\n    <!-- ---------- Блок статьи ------------ --->\n    <!-- <div class=\"item\" v-for=\"el in items\" :key=\"el.id\"> -->\n    <div>\n      <img v-bind:src=\"this.items.img\" alt=\"\" />\n      <h4>{{ this.items.title }}</h4>\n      <p>{{ this.items.anons }}</p>\n      <!-- <p>{{ this.items.full_text }}</p> -->\n      <div>\n        {{ this.items.full_text }}\n      </div>\n      <!-- ----------  Блок полной статьи --------- -->\n      <!-- <p>\n        Данные действительно окружают нас во всех сферах жизни. Все это привело\n        к повышенной востребованности специалистов SQL. Но самое интересное в\n        этом всем то, что у профессионалов – гибкий график, чаще всего удаленная\n        работа, отличные условия труда и, конечно, высокий уровень заработной\n        платы. В интернете можно найти много информации о завышенных требованиях\n        к специалистам и высокой зарплате. Так ли это?\n      </p>\n      <br />\n      <h2>Немного о профессии <span style=\"color: red\">SQL</span></h2>\n      <p>\n        SQL –\n        <span style=\"text-decoration: underline\">\n          Structured Query Language</span\n        >\n        – это язык программирования, с помощью которого производится управление\n        базами данных. Разработчик SQL отвечает за разработку, настройку и\n        поддержку этих баз данных. Он же занимается созданием различных\n        продуктов, направленных на оптимизацию и повышение производительности\n        баз данных. Программистам также требуется взаимодействовать с написанием\n        и отладкой исходного кода. Для начала работы в этой сфере необходимо\n        хотя бы общее образование в сфере компьютерных технологий. За границей\n        требуется степень степень бакалавра или магистра. Кроме того, нужно\n        логическое мышление, стрессоустойчивость и способность решать любые\n        проблемы здесь и сейчас.\n      </p>\n      <img src=\"https://itproger.com/img/news/1683961960.png\" alt=\"\" />\n\n      <p>\n        Требований не так уж и много, но и они, и заработная плата будут очень\n        зависеть от уровня специалиста. Junior, middle и senior конечно будут\n        получать совершенно разные суммы, ведь у них разный уровень опыта,\n        квалификации и ответственности.\n      </p>\n      <br />\n      <h2>Junior SQL</h2>\n      <p>\n        Начинающим специалистам всегда сложно, вне зависимости от сферы\n        деятельности. Основное, что требуется от джунов – постоянное обучение и\n        выполнение рутинных задач. Чаще всего к данной категории относятся\n        студенты и лица, которые имеют опыт работы в сфере до 2-х лет. Для\n        джунов всегда много работы, т.к. им нужна практика. Чаще всего этот путь\n        непростой, но самое главное, что он открывает путь в профессию. Лучше\n        всего, если такой юный работник мотивирован, но чаще всего это не так.\n        Согласно сайту Ziprecruiter зарплата начинающих специалистов SQL\n        примерно от 40 000 до 60 000 долларов США в год. Но да, это без вычета\n        налогов, а они могут достигать и 40% от этой суммы.\n      </p>\n      <br />\n      <h2>Middle SQL</h2>\n      <p>\n        Мидлы это уже новый уровень. Работа у них более ответственная, а\n        нагрузка высокая. Но здесь главное не учиться, а показывать свои знания.\n        Чтобы работать мидлом требуется от 2 до 6 лет опыта работы в SQL. И хотя\n        учиться тоже нужно, на работника уже сваливают самостоятельную\n        разработку, оптимизацию и поддержку баз данных, а также создание сложных\n        SQL-запросов, оптимизацию производительности и участие в архитектурных\n        решениях.\n      </p>\n      <center>\n        <img\n          width=\"400px\"\n          src=\"https://itproger.com/img/news/1683961962.jpg\"\n          alt=\"\"\n        />\n      </center>\n      <p>\n        Но условия, требования, обязанности и заработная плата очень колеблются\n        в зависимости от компании и страны, в которой она находится. Так, если\n        опыт middle-SQL значителен – з/п будет расти. По данным сайта Glassdoor\n        специалистам этого уровня готовы платить от 60 000 до 90 000 долларов\n        США в год.\n      </p>\n      <br />\n      <h2>Senior SQL</h2>\n      <p>\n        Сеньоры – это высший левел. Их работа наиболее сложная, ведь\n        ответственность они несут за весь проект. Специалистам предстоит\n        руководить проектами, разрабатывать сложные базы данных и архитектуры, а\n        также оптимизировать и обеспечивать безопасность базы данных. Кроме\n        того, часто на их плечи взваливают руководство командой. Им дают как\n        SQL-специалистов более низкого ранга, так и профи из смежных профессий.\n        Всех нужно научить и контролировать, а также всем необходимо раздать\n        задачи. Senior – это как связующее звено. Он ведет переговоры с\n        заказчиком, берет в работу проект и презентует его тоже он. За все это\n        по данным Payscale работодатели готовы платить примерно от 90 000 до 120\n        000 долларов США в год и выше. Как видите, заработные платы у\n        SQL-специалистов достаточно хорошие, но есть IT-профессии, где достаток\n        на порядок выше.\n      </p> -->\n\n      <p>{{ this.items.published }}</p>\n      <!-- <button type=\"button\" class=\"btnDetails\">Details</button> -->\n    </div>\n  </main>\n  <section class=\"comments\">\n    <div>\n      <h2>Leave some comments</h2>\n      <!-- <form @submit.prevent=\"createPost\" :class=\"{ error: maxCharacters > 20 }\"> -->\n      <form @submit.prevent=\"addMsg\" :class=\"{ error: maxCharacters > 100 }\">\n        <!-- <form> -->\n        <input\n          type=\"text\"\n          v-model=\"userInput\"\n          placeholder=\"Enter You Name\"\n          id=\"user\"\n        /><br />\n        <label for=\"msg\"\n          >Max text: <span>{{ maxCharacters }} / 100</span></label\n        >\n        <textarea\n          v-model=\"msgInput\"\n          placeholder=\"Enter some message\"\n          id=\"msg\"\n        />\n        <button type=\"button\" class=\"btnAdd\" @click=\"addMsg\">\n          {{ msgBtnAdd }}\n        </button>\n      </form>\n    </div>\n\n    <div v-if=\"comments.length > 0\" id=\"articles\">\n      <!-- Перебираем массив, получаем эл-т, индекс и выводим каждый элемент -->\n      <h2>\n        Comments ( <span>{{ comments.length }}</span> )\n      </h2>\n      <div class=\"list-item\" v-for=\"el in comments\" :key=\"el.id\">\n        <button @click=\"deletePost(el)\">Delete</button>\n        <!-- <p>\n          {{ el.message }} <span>{{ el.user }}</span>\n        </p> -->\n        <h4>{{ el.user }}</h4>\n        <p>{{ el.message }}</p>\n      </div>\n    </div>\n    <h2 v-else class=\"empty\">\n      <center>There is no any articles!</center>\n    </h2>\n  </section>\n</template>\n\n<!-- ---------- vue - приложение -------------- -->\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      items: [],\n      comments: [],\n      comm: [],\n      userInput: \"\",\n      msgInput: \"\",\n      msgBtnAdd: \"Add Item\",\n    };\n  },\n\n  // Во vue.config.js сказали, что вместо 'api/'\n  // подставляем 'http://localhost:3000'\n  // переходим на главную страницу нашего api-приложения\n  async mounted() {\n    const result = await axios.get(\"/api/blog-item/\" + this.id);\n    this.items = result.data;\n\n    const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    this.comments = res.data;\n    console.log(this.id);\n    console.log(this.items);\n    console.log(this.comments);\n  },\n  methods: {\n    // async updateComments() {\n    //   const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    //   this.comments = res.data;\n    // },\n    // Удаление записей\n    async deletePost(el) {\n      await axios.delete(\"/api/blog-item/msg/\" + el._id);\n      // обращаемся к массиву и обрезаем, начиная с индекса 'i' - один элемент\n      // this.comments.splice(i, 1);\n      // console.log(`element: ${el}, id: ${i}`);\n      this.comments = this.comments.filter((item) => item._id != el._id);\n      console.log(el);\n      console.log(el._id);\n      console.log(this.comm);\n    },\n    // Добавление записей\n    async addMsg() {\n      //let date = Date.now();\n      let url = `/api/blog-item/msg/?user=${this.userInput}&message=${this.msgInput}&item_id=${this.id}`;\n      if (this.userInput !== \"\" && this.msgInput !== \"\") {\n        await axios.post(url);\n        // updateComments();\n        this.comments.push({\n          item_id: this.id,\n          user: this.userInput,\n          message: this.msgInput,\n        });\n        console.log(this.comments);\n        // после ввода, очищаем поля\n        this.userInput = \"\";\n        this.msgInput = \"\";\n      }\n      this.msgBtnAdd = \"Add Item\";\n    },\n  },\n  props: [\"id\"],\n  computed: {\n    // max число введенных символов - 20\n    maxCharacters() {\n      return this.msgInput.length;\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* ---------------- Main ---------------- */\nmain,\n.comments {\n  width: 90%;\n  padding: 20px 5%;\n  margin-bottom: 40px;\n  line-height: 22px;\n  /* display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  transition: width 700ms ease-in-out; */\n}\n/* main .item {\n  width: 380px;\n  background: #f1d1a1;\n  padding: 20px;\n  margin-bottom: 50px;\n  position: relative;\n}\n\nmain .item img {\n  transition: transform 500ms ease;\n}\n\nmain .item:hover img {\n  transform: scale(1.05);\n  cursor: pointer;\n} */\n\nmain h4 {\n  font-weight: 600;\n  font-size: 23px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  text-align: center;\n  color: #c20909;\n}\n\nmain p {\n  margin-top: 10px;\n  margin-bottom: 5px;\n  /* color: #c20909; */\n}\n\n.item button {\n  width: 60%;\n  margin-left: 20%;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  text-align: center;\n  font-size: 16px;\n  /* Выравниваем по центру (по вертикали), указываем line-height = height*/\n  /* line-height: 70px; */\n  /* background: #e79e6d; */\n  background: #a52323;\n  border: 2px solid coral;\n  color: cornsilk;\n  cursor: pointer;\n  transition: all 500ms ease;\n}\n\n.item button:hover {\n  cursor: pointer;\n  background: #cc1f1f;\n  /* background: #e43f3f; */\n}\n\n/* ---------------- Forms ---------------- */\n.list-item {\n  width: 100%;\n  background: #f1d1a1; /*aquamarine; #fcddaf; #dfbc4c*/\n  padding: 10px 15px;\n  margin-top: 10px;\n  border: 1px solid silver;\n  border-radius: 5px;\n  font-size: 14px;\n}\n\n.list-item p {\n  margin-bottom: 8px;\n}\n\n.list-item p span {\n  float: right;\n  font-size: 12px;\n  color: #8f772d;\n}\n\n.list-item p:last-child {\n  color: #b1953c;\n  font-size: 11px;\n}\n\n.list-item button {\n  /* display: block; */\n  float: right;\n  border: 0;\n  border-radius: 5px;\n  padding: 4px 8px;\n  margin: 0;\n  margin-left: 10px;\n  background: #d15a2a;\n  color: #fddaae;\n  cursor: pointer;\n  font-size: 12px;\n  transition: transform 300ms ease;\n}\n\n/* ---------- Блок формы ------------------ */\nform input,\nform textarea {\n  width: 100%;\n  background: bisque;\n  border-radius: 5px;\n  border: 2px solid burlywood;\n  padding: 8px 10px;\n  font-size: 14px;\n  outline: none;\n  margin-bottom: 20px;\n  margin-top: 3px;\n  resize: none;\n}\n\nform textarea {\n  height: 90px;\n}\n\nform label {\n  font-weight: bold;\n}\n\nform.error label {\n  color: #cf341ff1;\n}\n\nform button {\n  /* float: right; */\n  display: block;\n  /* width: 70px; */\n  background: #d15a2a; /*#f05a23;*/\n  border: 2px solid burlywood;\n  border-radius: 8px;\n  border-bottom-width: 4px;\n  padding: 10px 12px;\n  font-size: 13px;\n  font-weight: bold;\n  color: blanchedalmond;\n  cursor: pointer;\n  transition: all 100ms ease;\n}\n\nform button:hover {\n  margin-top: 2px;\n  border-bottom-width: 2px;\n  background: #f86f3e;\n}\n.btnEdit {\n  background: #348531;\n}\n\n/* ---------- Блок статей ------------------ */\n#articles {\n  margin: 20px;\n}\n\n#articles .post {\n  background: bisque;\n  padding: 20px;\n  margin-bottom: 20px;\n  border: 1px solid burlywood;\n  float: left;\n  width: 100%;\n}\n\n#articles .post button {\n  float: right;\n  background: #f05a23;\n  border: 2px solid burlywood;\n  border-radius: 8px;\n  border-bottom-width: 4px;\n  padding: 10px 12px;\n  font-size: 13px;\n  font-weight: bold;\n  color: blanchedalmond;\n  cursor: pointer;\n  transition: all 100ms ease;\n}\n\n#articles .post button:hover {\n  margin-top: 2px;\n  border-bottom-width: 2px;\n  background: #f86f3e;\n}\n\n.empty {\n  margin: 20px;\n  color: #e60101;\n}\n/* .list-item button:hover {\n  transform: scale(1.1);\n} */\n</style>\n"],"mappings":";AA6JA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EAED;EACA;EACA;EACA,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,MAAK,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,iBAAgB,GAAI,IAAI,CAACC,EAAE,CAAC;IAC3D,IAAI,CAACT,KAAI,GAAIO,MAAM,CAACR,IAAI;IAExB,MAAMW,GAAE,GAAI,MAAMb,KAAK,CAACW,GAAG,CAAC,qBAAoB,GAAI,IAAI,CAACC,EAAE,CAAC;IAC5D,IAAI,CAACR,QAAO,GAAIS,GAAG,CAACX,IAAI;IACxBY,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,EAAE,CAAC;IACpBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAAC;IACvBW,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,QAAQ,CAAC;EAC5B,CAAC;EACDY,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA,MAAMC,UAAUA,CAACC,EAAE,EAAE;MACnB,MAAMlB,KAAK,CAACmB,MAAM,CAAC,qBAAoB,GAAID,EAAE,CAACE,GAAG,CAAC;MAClD;MACA;MACA;MACA,IAAI,CAAChB,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACiB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,GAAE,IAAKF,EAAE,CAACE,GAAG,CAAC;MAClEN,OAAO,CAACC,GAAG,CAACG,EAAE,CAAC;MACfJ,OAAO,CAACC,GAAG,CAACG,EAAE,CAACE,GAAG,CAAC;MACnBN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,IAAI,CAAC;IACxB,CAAC;IACD;IACA,MAAMkB,MAAMA,CAAA,EAAG;MACb;MACA,IAAIC,GAAE,GAAK,4BAA2B,IAAI,CAAClB,SAAU,YAAW,IAAI,CAACC,QAAS,YAAW,IAAI,CAACK,EAAG,EAAC;MAClG,IAAI,IAAI,CAACN,SAAQ,KAAM,EAAC,IAAK,IAAI,CAACC,QAAO,KAAM,EAAE,EAAE;QACjD,MAAMP,KAAK,CAACyB,IAAI,CAACD,GAAG,CAAC;QACrB;QACA,IAAI,CAACpB,QAAQ,CAACsB,IAAI,CAAC;UACjBC,OAAO,EAAE,IAAI,CAACf,EAAE;UAChBgB,IAAI,EAAE,IAAI,CAACtB,SAAS;UACpBuB,OAAO,EAAE,IAAI,CAACtB;QAChB,CAAC,CAAC;QACFO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,QAAQ,CAAC;QAC1B;QACA,IAAI,CAACE,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACC,QAAO,GAAI,EAAE;MACpB;MACA,IAAI,CAACC,SAAQ,GAAI,UAAU;IAC7B;EACF,CAAC;EACDsB,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,QAAQ,EAAE;IACR;IACAC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACzB,QAAQ,CAAC0B,MAAM;IAC7B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      items: [],\n      comments: [],\n      comm: [],\n      // isVisible: true,\n      // title: \"\",\n      // user: \"\",\n      msgBtnAdd: \"Add Item\"\n    };\n  },\n  // Во vue.config.js сказали, что вместо 'api/'\n  // подставляем 'http://localhost:3000'\n  // переходим на главную страницу нашего api-приложения\n  async mounted() {\n    const result = await axios.get(\"/api/blog-item/\" + this.id);\n    this.items = result.data;\n    const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    this.comments = res.data;\n    console.log(this.id);\n    console.log(this.items);\n    console.log(this.comments);\n  },\n  methods: {\n    // Удаление записей\n    async deletePost(el) {\n      await axios.delete(\"/api/blog-item/msg/\" + el._id);\n      // обращаемся к массиву и обрезаем, начиная с индекса 'i' - один элемент\n      // this.comments.splice(i, 1);\n      // console.log(`element: ${el}, id: ${i}`);\n      this.comments = this.comments.filter(item => item._id != el._id);\n      console.log(el);\n      console.log(el._id);\n      console.log(this.comm);\n    },\n    // Добавление записей\n    async addItem() {\n      let date = Date.now();\n      let url = `/api/blog-item/?title=${this.title}&user=${this.user}&published=${date}`;\n      // так не сработает, нужно передавать параметры в командной строке (запросе)\n      // const result = await axios.post(\"/api/todo-item/\", {\n      //   title: this.title,\n      //   user: this.user,\n      //   published: Date.now(), //\"2023\",\n      // });\n      if (this.isNew) {\n        await axios.post(url);\n        // Отображаем запись\n        this.items.push({\n          title: this.title,\n          user: this.user,\n          published: date\n        });\n      } else {\n        // await axios.put(url + this.id);\n        await axios.post(url);\n        // console.log(\"Inside Add i: \" + i);\n        console.log(\"el.title: \" + this.el.title);\n        // console.log(\"this.items.user: \" + this.items[i].user);\n        console.log(\"this.title: \" + this.title);\n        console.log(\"this.user: \" + this.user);\n        console.log(\"date: \" + date);\n        this.el.title = this.title;\n        this.el.user = this.user;\n        this.el.published = date;\n        this.msgBtnAdd = \"Add Item\";\n      }\n      // Очищаем переменные title, user - и значения внутри input-полей\n      this.title = \"\";\n      this.user = \"\";\n    }\n    // Обновление записей\n    // async editItem(el, i) {\n    // let date = Date.now();\n    // this.el = el;\n    // this.i = i;\n    // this.id = el._id;\n    // this.isNew = false;\n    // console.log(\"isNew after: \" + this.isNew);\n    // console.log(\"msgBtnAdd: \" + this.msgBtnAdd);\n\n    // this.msgBtnAdd = \"Update\";\n    // console.log(\"msgBtnAdd: \" + this.msgBtnAdd);\n    // console.log(\"this.el: \");\n    // console.log(this.el);\n    // console.log(\"this.i: \" + this.i);\n    // console.log(\"this.id: \" + this.id);\n    // btnAdd.innerHTML = \"Update\";\n    // let url = `/api/todo-item/?title=${this.title}&user=${this.user}&published=${date}`;\n    //  await axios.post(url);\n    // Отображаем запись\n    // this.items.push({\n    //   title: this.title,\n    //   user: this.user,\n    //   published: date,\n    // });\n    // console.log(`el: ${el}, i: ${i}`);\n    // `title: (!(${title}) == '' ? ${title}: '') , this.title: ${this.title}`\n    //   console.log(`el: ${el}`);\n    //   console.log(`title: ${el.title}`);\n    //   console.log(`user: ${el.user}`);\n    //   console.log(`published: ${el.published}`);\n\n    //   this.title = el.title;\n    //   this.user = el.user;\n    // },\n  },\n\n  props: [\"id\"]\n};","map":{"version":3,"names":["axios","name","data","items","comments","comm","msgBtnAdd","mounted","result","get","id","res","console","log","methods","deletePost","el","delete","_id","filter","item","addItem","date","Date","now","url","title","user","isNew","post","push","published","props"],"sources":["D:\\JS\\JSProjects\\Node JS\\nodejs\\blog\\public\\src\\components\\Item1.vue"],"sourcesContent":["<template>\n  <div>ID: {{ id }}</div>\n  <main class=\"items\">\n    <!-- <div class=\"item\" v-for=\"el in items\" :key=\"el.id\"> -->\n    <div>\n      <img v-bind:src=\"this.items.img\" alt=\"\" />\n      <h4>{{ this.items.title }}</h4>\n      <p>{{ this.items.anons }}</p>\n      <p>{{ this.items.published }}</p>\n      <!-- <button type=\"button\" class=\"btnDetails\">Details</button> -->\n    </div>\n  </main>\n  <section class=\"comments\">\n    <div>\n      <h2>Leave some comments</h2>\n      <form>\n        <input\n          type=\"text\"\n          v-model=\"msg\"\n          placeholder=\"What do you want to do?\"\n        />\n        <input type=\"text\" v-model=\"user\" placeholder=\"Enter You Login\" />\n        <button type=\"button\" class=\"btnAdd\" @click=\"addItem(el, i)\">\n          {{ msgBtnAdd }}\n        </button>\n      </form>\n    </div>\n\n    <div v-if=\"comments.length > 0\" id=\"articles\">\n      <!-- Перебираем массив, получаем эл-т, индекс и выводим каждый элемент -->\n      <h2>\n        Comments ( <span>{{ comments.length }}</span> )\n      </h2>\n      <div class=\"list-item\" v-for=\"el in comments\" :key=\"el.id\">\n        <button @click=\"deletePost(el)\">Delete</button>\n        <!-- <p>\n          {{ el.message }} <span>{{ el.user }}</span>\n        </p> -->\n        <h4>{{ el.user }}</h4>\n        <p>{{ el.message }}</p>\n      </div>\n    </div>\n    <h2 v-else class=\"empty\">\n      <center>There is no any articles!</center>\n    </h2>\n  </section>\n</template>\n\n<!-- ---------- vue - приложение -------------- -->\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      items: [],\n      comments: [],\n      comm: [],\n      // isVisible: true,\n      // title: \"\",\n      // user: \"\",\n      msgBtnAdd: \"Add Item\",\n    };\n  },\n\n  // Во vue.config.js сказали, что вместо 'api/'\n  // подставляем 'http://localhost:3000'\n  // переходим на главную страницу нашего api-приложения\n  async mounted() {\n    const result = await axios.get(\"/api/blog-item/\" + this.id);\n    this.items = result.data;\n\n    const res = await axios.get(\"/api/blog-item/msg/\" + this.id);\n    this.comments = res.data;\n    console.log(this.id);\n    console.log(this.items);\n    console.log(this.comments);\n  },\n  methods: {\n    // Удаление записей\n    async deletePost(el) {\n      await axios.delete(\"/api/blog-item/msg/\" + el._id);\n      // обращаемся к массиву и обрезаем, начиная с индекса 'i' - один элемент\n      // this.comments.splice(i, 1);\n      // console.log(`element: ${el}, id: ${i}`);\n      this.comments = this.comments.filter((item) => item._id != el._id);\n      console.log(el);\n      console.log(el._id);\n      console.log(this.comm);\n    },\n    // Добавление записей\n    async addItem() {\n      let date = Date.now();\n      let url = `/api/blog-item/?title=${this.title}&user=${this.user}&published=${date}`;\n      // так не сработает, нужно передавать параметры в командной строке (запросе)\n      // const result = await axios.post(\"/api/todo-item/\", {\n      //   title: this.title,\n      //   user: this.user,\n      //   published: Date.now(), //\"2023\",\n      // });\n      if (this.isNew) {\n        await axios.post(url);\n        // Отображаем запись\n        this.items.push({\n          title: this.title,\n          user: this.user,\n          published: date,\n        });\n      } else {\n        // await axios.put(url + this.id);\n        await axios.post(url);\n        // console.log(\"Inside Add i: \" + i);\n        console.log(\"el.title: \" + this.el.title);\n        // console.log(\"this.items.user: \" + this.items[i].user);\n        console.log(\"this.title: \" + this.title);\n        console.log(\"this.user: \" + this.user);\n        console.log(\"date: \" + date);\n        this.el.title = this.title;\n        this.el.user = this.user;\n        this.el.published = date;\n\n        this.msgBtnAdd = \"Add Item\";\n      }\n      // Очищаем переменные title, user - и значения внутри input-полей\n      this.title = \"\";\n      this.user = \"\";\n    },\n    // Обновление записей\n    // async editItem(el, i) {\n    // let date = Date.now();\n    // this.el = el;\n    // this.i = i;\n    // this.id = el._id;\n    // this.isNew = false;\n    // console.log(\"isNew after: \" + this.isNew);\n    // console.log(\"msgBtnAdd: \" + this.msgBtnAdd);\n\n    // this.msgBtnAdd = \"Update\";\n    // console.log(\"msgBtnAdd: \" + this.msgBtnAdd);\n    // console.log(\"this.el: \");\n    // console.log(this.el);\n    // console.log(\"this.i: \" + this.i);\n    // console.log(\"this.id: \" + this.id);\n    // btnAdd.innerHTML = \"Update\";\n    // let url = `/api/todo-item/?title=${this.title}&user=${this.user}&published=${date}`;\n    //  await axios.post(url);\n    // Отображаем запись\n    // this.items.push({\n    //   title: this.title,\n    //   user: this.user,\n    //   published: date,\n    // });\n    // console.log(`el: ${el}, i: ${i}`);\n    // `title: (!(${title}) == '' ? ${title}: '') , this.title: ${this.title}`\n    //   console.log(`el: ${el}`);\n    //   console.log(`title: ${el.title}`);\n    //   console.log(`user: ${el.user}`);\n    //   console.log(`published: ${el.published}`);\n\n    //   this.title = el.title;\n    //   this.user = el.user;\n    // },\n  },\n  props: [\"id\"],\n};\n</script>\n\n<style scoped>\n/* ---------------- Main ---------------- */\nmain,\n.comments {\n  width: 90%;\n  padding: 20px 5%;\n  margin-bottom: 40px;\n  /* display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  transition: width 700ms ease-in-out; */\n}\n/* main .item {\n  width: 380px;\n  background: #f1d1a1;\n  padding: 20px;\n  margin-bottom: 50px;\n  position: relative;\n}\n\nmain .item img {\n  transition: transform 500ms ease;\n}\n\nmain .item:hover img {\n  transform: scale(1.05);\n  cursor: pointer;\n} */\n\nmain h4 {\n  font-weight: 600;\n  font-size: 23px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  text-align: center;\n  color: #c20909;\n}\n\nmain p {\n  margin-top: 10px;\n  margin-bottom: 5px;\n  /* color: #c20909; */\n}\n\n.item button {\n  width: 60%;\n  margin-left: 20%;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  text-align: center;\n  font-size: 16px;\n  /* Выравниваем по центру (по вертикали), указываем line-height = height*/\n  /* line-height: 70px; */\n  /* background: #e79e6d; */\n  background: #a52323;\n  border: 2px solid coral;\n  color: cornsilk;\n  cursor: pointer;\n  transition: all 500ms ease;\n}\n\n.item button:hover {\n  cursor: pointer;\n  background: #cc1f1f;\n  /* background: #e43f3f; */\n}\n\n/* ---------------- Forms ---------------- */\n.list-item {\n  width: 100%;\n  background: #f1d1a1; /*aquamarine; #fcddaf; #dfbc4c*/\n  padding: 10px 15px;\n  margin-top: 10px;\n  border: 1px solid silver;\n  border-radius: 5px;\n  font-size: 14px;\n}\n\n.list-item p {\n  margin-bottom: 8px;\n}\n\n.list-item p span {\n  float: right;\n  font-size: 12px;\n  color: #8f772d;\n}\n\n.list-item p:last-child {\n  color: #b1953c;\n  font-size: 11px;\n}\n\n.list-item button {\n  /* display: block; */\n  float: right;\n  border: 0;\n  border-radius: 5px;\n  padding: 4px 8px;\n  margin: 0;\n  margin-left: 10px;\n  background: #d15a2a;\n  color: #fddaae;\n  cursor: pointer;\n  font-size: 12px;\n  transition: transform 300ms ease;\n}\n\n.btnEdit {\n  background: #348531;\n}\n\n/* ---------- Блок статей ------------------ */\n#articles {\n  margin: 20px;\n}\n\n#articles .post {\n  background: bisque;\n  padding: 20px;\n  margin-bottom: 20px;\n  border: 1px solid burlywood;\n  float: left;\n  width: 100%;\n}\n\n#articles .post button {\n  float: right;\n  background: #f05a23;\n  border: 2px solid burlywood;\n  border-radius: 8px;\n  border-bottom-width: 4px;\n  padding: 10px 12px;\n  font-size: 13px;\n  font-weight: bold;\n  color: blanchedalmond;\n  cursor: pointer;\n  transition: all 100ms ease;\n}\n\n#articles .post button:hover {\n  margin-top: 2px;\n  border-bottom-width: 2px;\n  background: #f86f3e;\n}\n\n.empty {\n  margin: 20px;\n  color: #e60101;\n}\n/* .list-item button:hover {\n  transform: scale(1.1);\n} */\n</style>\n"],"mappings":";AAkDA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,EAAE;MACR;MACA;MACA;MACAC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EAED;EACA;EACA;EACA,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,MAAK,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,iBAAgB,GAAI,IAAI,CAACC,EAAE,CAAC;IAC3D,IAAI,CAACP,KAAI,GAAIK,MAAM,CAACN,IAAI;IAExB,MAAMS,GAAE,GAAI,MAAMX,KAAK,CAACS,GAAG,CAAC,qBAAoB,GAAI,IAAI,CAACC,EAAE,CAAC;IAC5D,IAAI,CAACN,QAAO,GAAIO,GAAG,CAACT,IAAI;IACxBU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,EAAE,CAAC;IACpBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,KAAK,CAAC;IACvBS,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,QAAQ,CAAC;EAC5B,CAAC;EACDU,OAAO,EAAE;IACP;IACA,MAAMC,UAAUA,CAACC,EAAE,EAAE;MACnB,MAAMhB,KAAK,CAACiB,MAAM,CAAC,qBAAoB,GAAID,EAAE,CAACE,GAAG,CAAC;MAClD;MACA;MACA;MACA,IAAI,CAACd,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACe,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,GAAE,IAAKF,EAAE,CAACE,GAAG,CAAC;MAClEN,OAAO,CAACC,GAAG,CAACG,EAAE,CAAC;MACfJ,OAAO,CAACC,GAAG,CAACG,EAAE,CAACE,GAAG,CAAC;MACnBN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,CAAC;IACxB,CAAC;IACD;IACA,MAAMgB,OAAOA,CAAA,EAAG;MACd,IAAIC,IAAG,GAAIC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrB,IAAIC,GAAE,GAAK,yBAAwB,IAAI,CAACC,KAAM,SAAQ,IAAI,CAACC,IAAK,cAAaL,IAAK,EAAC;MACnF;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACM,KAAK,EAAE;QACd,MAAM5B,KAAK,CAAC6B,IAAI,CAACJ,GAAG,CAAC;QACrB;QACA,IAAI,CAACtB,KAAK,CAAC2B,IAAI,CAAC;UACdJ,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,IAAI,EAAE,IAAI,CAACA,IAAI;UACfI,SAAS,EAAET;QACb,CAAC,CAAC;MACJ,OAAO;QACL;QACA,MAAMtB,KAAK,CAAC6B,IAAI,CAACJ,GAAG,CAAC;QACrB;QACAb,OAAO,CAACC,GAAG,CAAC,YAAW,GAAI,IAAI,CAACG,EAAE,CAACU,KAAK,CAAC;QACzC;QACAd,OAAO,CAACC,GAAG,CAAC,cAAa,GAAI,IAAI,CAACa,KAAK,CAAC;QACxCd,OAAO,CAACC,GAAG,CAAC,aAAY,GAAI,IAAI,CAACc,IAAI,CAAC;QACtCf,OAAO,CAACC,GAAG,CAAC,QAAO,GAAIS,IAAI,CAAC;QAC5B,IAAI,CAACN,EAAE,CAACU,KAAI,GAAI,IAAI,CAACA,KAAK;QAC1B,IAAI,CAACV,EAAE,CAACW,IAAG,GAAI,IAAI,CAACA,IAAI;QACxB,IAAI,CAACX,EAAE,CAACe,SAAQ,GAAIT,IAAI;QAExB,IAAI,CAAChB,SAAQ,GAAI,UAAU;MAC7B;MACA;MACA,IAAI,CAACoB,KAAI,GAAI,EAAE;MACf,IAAI,CAACC,IAAG,GAAI,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;EACF,CAAC;;EACDK,KAAK,EAAE,CAAC,IAAI;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
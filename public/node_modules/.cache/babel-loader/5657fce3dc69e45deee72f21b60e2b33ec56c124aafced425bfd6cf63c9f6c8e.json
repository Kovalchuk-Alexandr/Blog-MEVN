{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6c8fe47e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"items\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Todo Form\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"To do list\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"(img/{{ el.img }})\",\n  alt: \"\"\n}, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, \"ID: \" + _toDisplayString($props.id), 1 /* TEXT */), _createElementVNode(\"main\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, el => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"item\",\n      key: el.id\n    }, [_createElementVNode(\"img\", {\n      src: el.img,\n      alt: \"\"\n    }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"p\", null, _toDisplayString(el.img), 1 /* TEXT */), _createElementVNode(\"h4\", null, _toDisplayString(el.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(el.anons), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(el.published), 1 /* TEXT */), _createCommentVNode(\" <button type=\\\"button\\\" class=\\\"btnDetails\\\">Details</button> \")]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", null, [_hoisted_3, _createElementVNode(\"form\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.title = $event),\n    placeholder: \"What do you want to do?\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.title]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.user = $event),\n    placeholder: \"Enter You Login\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.user]]), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btnAdd\",\n    onClick: _cache[2] || (_cache[2] = $event => $options.addItem(_ctx.el, _ctx.i))\n  }, _toDisplayString($data.msgBtnAdd), 1 /* TEXT */)])]), _createElementVNode(\"div\", null, [_hoisted_4, _createCommentVNode(\" Перебираем массив, получаем эл-т, индекс и выводим каждый элемент \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, el => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"list-item\",\n      key: el._id\n    }, [_hoisted_5, _createElementVNode(\"p\", null, _toDisplayString(el.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(el.anons), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(el.published), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","src","alt","_toDisplayString","$props","id","_hoisted_1","_createElementBlock","_Fragment","_renderList","$data","items","el","key","img","title","anons","published","_createCommentVNode","_hoisted_3","type","_ctx","$event","placeholder","user","onClick","_cache","$options","addItem","i","msgBtnAdd","_hoisted_4","_id","_hoisted_5"],"sources":["D:\\JS\\JSProjects\\Node JS\\nodejs\\blog\\public\\src\\components\\Item1.vue"],"sourcesContent":["<template>\n  <div>ID: {{ id }}</div>\n  <main class=\"items\">\n    <div class=\"item\" v-for=\"el in items\" :key=\"el.id\">\n      <img v-bind:src=\"el.img\" alt=\"\" />\n      <p>{{ el.img }}</p>\n      <h4>{{ el.title }}</h4>\n      <p>{{ el.anons }}</p>\n      <p>{{ el.published }}</p>\n      <!-- <button type=\"button\" class=\"btnDetails\">Details</button> -->\n    </div>\n    <div>\n      <h2>Todo Form</h2>\n      <form>\n        <input\n          type=\"text\"\n          v-model=\"title\"\n          placeholder=\"What do you want to do?\"\n        />\n        <input type=\"text\" v-model=\"user\" placeholder=\"Enter You Login\" />\n        <button type=\"button\" class=\"btnAdd\" @click=\"addItem(el, i)\">\n          {{ msgBtnAdd }}\n        </button>\n      </form>\n    </div>\n    <div>\n      <h2>To do list</h2>\n      <!-- Перебираем массив, получаем эл-т, индекс и выводим каждый элемент -->\n      <div class=\"list-item\" v-for=\"el in items\" :key=\"el._id\">\n        <img src=\"(img/{{ el.img }})\" alt=\"\" />\n        <p>{{ el.title }}</p>\n        <p>{{ el.anons }}</p>\n        <p>{{ el.published }}</p>\n      </div>\n    </div>\n  </main>\n</template>\n\n<!-- ---------- vue - приложение -------------- -->\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      items: [],\n      // isVisible: true,\n      // title: \"\",\n      // user: \"\",\n      msgBtnAdd: \"Add Item\",\n      // isNew: true,\n      // el: {},\n      // i: 0,\n      // id: 0,\n    };\n  },\n\n  // Во vue.config.js сказали, что вместо 'api/'\n  // подставляем 'http://localhost:3000'\n  // переходим на главную страницу нашего api-приложения\n  async mounted() {\n    const result = await axios.get(\"/api/blog-item/\" + this.id);\n    this.items = result.data;\n    // this.id = id;\n    console.log(this.id);\n    console.log(this.items);\n  },\n  methods: {\n    // Удаление записей\n    async deleteItem(el, i) {\n      await axios.delete(\"/api/blog-item/\" + el._id);\n      // обращаемся к массиву и обрезаем, начиная с индекса 'i' - один элемент\n      this.items.splice(i, 1);\n    },\n    // Добавление записей\n    async addItem() {\n      let date = Date.now();\n      let url = `/api/blog-item/?title=${this.title}&user=${this.user}&published=${date}`;\n      // так не сработает, нужно передавать параметры в командной строке (запросе)\n      // const result = await axios.post(\"/api/todo-item/\", {\n      //   title: this.title,\n      //   user: this.user,\n      //   published: Date.now(), //\"2023\",\n      // });\n      if (this.isNew) {\n        await axios.post(url);\n        // Отображаем запись\n        this.items.push({\n          title: this.title,\n          user: this.user,\n          published: date,\n        });\n      } else {\n        // await axios.put(url + this.id);\n        await axios.post(url);\n        // console.log(\"Inside Add i: \" + i);\n        console.log(\"el.title: \" + this.el.title);\n        // console.log(\"this.items.user: \" + this.items[i].user);\n        console.log(\"this.title: \" + this.title);\n        console.log(\"this.user: \" + this.user);\n        console.log(\"date: \" + date);\n        this.el.title = this.title;\n        this.el.user = this.user;\n        this.el.published = date;\n\n        this.msgBtnAdd = \"Add Item\";\n      }\n      // Очищаем переменные title, user - и значения внутри input-полей\n      this.title = \"\";\n      this.user = \"\";\n    },\n    // Обновление записей\n    // async editItem(el, i) {\n    // let date = Date.now();\n    // this.el = el;\n    // this.i = i;\n    // this.id = el._id;\n    // this.isNew = false;\n    // console.log(\"isNew after: \" + this.isNew);\n    // console.log(\"msgBtnAdd: \" + this.msgBtnAdd);\n\n    // this.msgBtnAdd = \"Update\";\n    // console.log(\"msgBtnAdd: \" + this.msgBtnAdd);\n    // console.log(\"this.el: \");\n    // console.log(this.el);\n    // console.log(\"this.i: \" + this.i);\n    // console.log(\"this.id: \" + this.id);\n    // btnAdd.innerHTML = \"Update\";\n    // let url = `/api/todo-item/?title=${this.title}&user=${this.user}&published=${date}`;\n    //  await axios.post(url);\n    // Отображаем запись\n    // this.items.push({\n    //   title: this.title,\n    //   user: this.user,\n    //   published: date,\n    // });\n    // console.log(`el: ${el}, i: ${i}`);\n    // `title: (!(${title}) == '' ? ${title}: '') , this.title: ${this.title}`\n    //   console.log(`el: ${el}`);\n    //   console.log(`title: ${el.title}`);\n    //   console.log(`user: ${el.user}`);\n    //   console.log(`published: ${el.published}`);\n\n    //   this.title = el.title;\n    //   this.user = el.user;\n    // },\n  },\n  props: [\"id\"],\n  // {\n  //   // указываем свойства для передаваемого параметра:\n  //   // type: String (Number), - тип - строка\n  //   // required: true (false) - обязательное или нет\n  //   id: {\n  //     type: Number,\n  //     required: true,\n  //   },\n  // },\n};\n// console.log(this.item);\n</script>\n\n<style scoped>\n.item button {\n  width: 60%;\n  margin-left: 20%;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  text-align: center;\n  font-size: 16px;\n  /* Выравниваем по центру (по вертикали), указываем line-height = height*/\n  /* line-height: 70px; */\n  /* background: #e79e6d; */\n  background: #a52323;\n  border: 2px solid coral;\n  color: cornsilk;\n  cursor: pointer;\n  transition: all 500ms ease;\n}\n\n.item button:hover {\n  cursor: pointer;\n  background: #cc1f1f;\n  /* background: #e43f3f; */\n}\n.list-item {\n  width: 100%;\n  background: aquamarine; /*#fcddaf; #dfbc4c*/\n  padding: 10px 15px;\n  margin-top: 10px;\n  border: 1px solid silver;\n  border-radius: 5px;\n  font-size: 14px;\n}\n\n.list-item p {\n  margin-bottom: 8px;\n}\n\n.list-item p span {\n  float: right;\n  font-size: 12px;\n  color: #8f772d;\n}\n\n.list-item p:last-child {\n  color: #b1953c;\n  font-size: 11px;\n}\n\n.list-item button {\n  /* display: block; */\n  float: right;\n  border: 0;\n  border-radius: 5px;\n  padding: 4px 8px;\n  margin: 0;\n  margin-left: 10px;\n  color: #fddaae;\n  cursor: pointer;\n  font-size: 12px;\n  /* transition: transform 300ms ease; */\n}\n\n.btnEdit {\n  background: #348531;\n}\n\n/* .list-item button:hover {\n  transform: scale(1.1);\n} */\n</style>\n"],"mappings":";;;EAEQA,KAAK,EAAC;AAAO;;gEAUfC,mBAAA,CAAkB,YAAd,WAAS;gEAcbA,mBAAA,CAAmB,YAAf,YAAU;gEAGZA,mBAAA,CAAuC;EAAlCC,GAAG,EAAC,oBAAoB;EAACC,GAAG,EAAC;;;;6DA5BxCF,mBAAA,CAAuB,aAAlB,MAAI,GAAAG,gBAAA,CAAGC,MAAA,CAAAC,EAAE,kBACdL,mBAAA,CAiCO,QAjCPM,UAiCO,I,kBAhCLC,mBAAA,CAOMC,SAAA,QAAAC,WAAA,CAPyBC,KAAA,CAAAC,KAAK,EAAXC,EAAE;yBAA3BL,mBAAA,CAOM;MAPDR,KAAK,EAAC,MAAM;MAAsBc,GAAG,EAAED,EAAE,CAACP;QAC7CL,mBAAA,CAAkC;MAAtBC,GAAG,EAAEW,EAAE,CAACE,GAAG;MAAEZ,GAAG,EAAC;yCAC7BF,mBAAA,CAAmB,WAAAG,gBAAA,CAAbS,EAAE,CAACE,GAAG,kBACZd,mBAAA,CAAuB,YAAAG,gBAAA,CAAhBS,EAAE,CAACG,KAAK,kBACff,mBAAA,CAAqB,WAAAG,gBAAA,CAAfS,EAAE,CAACI,KAAK,kBACdhB,mBAAA,CAAyB,WAAAG,gBAAA,CAAnBS,EAAE,CAACK,SAAS,kBAClBC,mBAAA,mEAAkE,C;kCAEpElB,mBAAA,CAaM,cAZJmB,UAAkB,EAClBnB,mBAAA,CAUO,e,gBATLA,mBAAA,CAIE;IAHAoB,IAAI,EAAC,MAAM;+DACFC,IAAA,CAAAN,KAAK,GAAAO,MAAA;IACdC,WAAW,EAAC;iDADHF,IAAA,CAAAN,KAAK,E,mBAGhBf,mBAAA,CAAkE;IAA3DoB,IAAI,EAAC,MAAM;+DAAUC,IAAA,CAAAG,IAAI,GAAAF,MAAA;IAAEC,WAAW,EAAC;iDAAlBF,IAAA,CAAAG,IAAI,E,GAChCxB,mBAAA,CAES;IAFDoB,IAAI,EAAC,QAAQ;IAACrB,KAAK,EAAC,QAAQ;IAAE0B,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEK,QAAA,CAAAC,OAAO,CAACP,IAAA,CAAAT,EAAE,EAAES,IAAA,CAAAQ,CAAC;sBACrDnB,KAAA,CAAAoB,SAAS,iB,KAIlB9B,mBAAA,CASM,cARJ+B,UAAmB,EACnBb,mBAAA,uEAA0E,G,kBAC1EX,mBAAA,CAKMC,SAAA,QAAAC,WAAA,CAL8BC,KAAA,CAAAC,KAAK,EAAXC,EAAE;yBAAhCL,mBAAA,CAKM;MALDR,KAAK,EAAC,WAAW;MAAsBc,GAAG,EAAED,EAAE,CAACoB;QAClDC,UAAuC,EACvCjC,mBAAA,CAAqB,WAAAG,gBAAA,CAAfS,EAAE,CAACG,KAAK,kBACdf,mBAAA,CAAqB,WAAAG,gBAAA,CAAfS,EAAE,CAACI,KAAK,kBACdhB,mBAAA,CAAyB,WAAAG,gBAAA,CAAnBS,EAAE,CAACK,SAAS,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}